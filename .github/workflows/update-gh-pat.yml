# ------------------------------------------------------------------------------
# üõ†Ô∏è GitHub Actions Workflow: Refresh GH_PAT using GitHub App
#
# This workflow automates the process of generating a GitHub App installation
# token and storing it as a repository secret named `GH_PAT`.
#
# üîÑ What it does:
# 1. Runs every 55 minutes (or manually via workflow_dispatch).
# 2. Installs dependencies including PyNaCl.
# 3. Generates a JWT using GitHub App credentials.
# 4. Uses the JWT to request an installation access token.
# 5. Fetches the repository's public key.
# 6. Encrypts the token using Python and PyNaCl.
# 7. Updates the `GH_PAT` secret using the GitHub REST API.
#
# üîê Required Repository Secrets:
# - APP_ID: GitHub App ID
# - INSTALLATION_ID: GitHub App Installation ID
# - PRIVATE_KEY: GitHub App private key (.pem contents)
# ------------------------------------------------------------------------------

name: Refresh GH_PAT from GitHub App

on:
  schedule:
    - cron: '*/55 * * * *'  # Every 55 minutes
  workflow_dispatch:

jobs:
  refresh-gh-pat:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: write

    steps:
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl libsodium-dev
          pip install pynacl

      - name: Generate GitHub App token
        id: generate_token
        env:
          APP_ID: ${{ secrets.APP_ID }}
          INSTALLATION_ID: ${{ secrets.INSTALLATION_ID }}
          PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        run: |
          iat=$(date +%s)
          exp=$((iat + 540))  # Token valid for 9 minutes
          header='{"alg":"RS256","typ":"JWT"}'
          payload=$(jq -n --arg iat "$iat" --arg exp "$exp" --arg iss "$APP_ID" \
            '{iat: ($iat|tonumber), exp: ($exp|tonumber), iss: $iss}')
          b64enc() { openssl base64 -e -A | tr '+/' '-_' | tr -d '='; }
          jwt_header=$(echo -n "$header" | b64enc)
          jwt_payload=$(echo -n "$payload" | b64enc)
          unsigned_token="$jwt_header.$jwt_payload"
          jwt_signature=$(echo -n "$unsigned_token" | \
            openssl dgst -sha256 -sign <(echo "$PRIVATE_KEY") | b64enc)
          jwt="$unsigned_token.$jwt_signature"

          token_response=$(curl -s -X POST \
            -H "Authorization: Bearer $jwt" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/app/installations/$INSTALLATION_ID/access_tokens)

          echo "token=$(echo "$token_response" | jq -r .token)" >> $GITHUB_OUTPUT

      - name: Get repository public key using App token
        id: public_key
        env:
          GH_APP_TOKEN: ${{ steps.generate_token.outputs.token }}
        run: |
          response=$(curl -s -H "Authorization: Bearer $GH_APP_TOKEN" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/public-key)

          echo "key=$(echo "$response" | jq -r .key)" >> $GITHUB_OUTPUT
          echo "key_id=$(echo "$response" | jq -r .key_id)" >> $GITHUB_OUTPUT

      - name: Encrypt token using libsodium
        id: encrypt_token
        env:
          TOKEN: ${{ steps.generate_token.outputs.token }}
          PUBLIC_KEY: ${{ steps.public_key.outputs.key }}
        run: |
          python3 - <<EOF
          import os, base64, sys
          from nacl.public import PublicKey, SealedBox

          token = os.environ["TOKEN"]
          key_b64 = os.environ["PUBLIC_KEY"]

          try:
              key_bytes = base64.b64decode(key_b64)
              if len(key_bytes) != 32:
                  raise ValueError("Decoded public key is not 32 bytes")
              sealed_box = SealedBox(PublicKey(key_bytes))
              encrypted = sealed_box.encrypt(token.encode())
              print(f"encrypted_value={base64.b64encode(encrypted).decode()}")
          except Exception as e:
              print(f"::error:: Failed to encrypt token: {e}")
              sys.exit(1)
          EOF

      - name: Update GH_PAT secret using GitHub REST API
        run: |
          curl -X PUT \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            https://api.github.com/repos/${{ github.repository }}/actions/secrets/GH_PAT \
            -d @- <<EOF
          {
            "encrypted_value": "${{ steps.encrypt_token.outputs.encrypted_value }}",
            "key_id": "${{ steps.public_key.outputs.key_id }}"
          }
          EOF